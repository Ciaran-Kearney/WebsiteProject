---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Personal portfolio website for Ciar√°n Kearney, Mechanical Engineer" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description}>
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Preload critical assets -->
    <link rel="preload" href="/styles/global.css" as="style">
    
    <!-- Font optimization -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <link rel="stylesheet" href="/styles/global.css" />
  </head>
  <body>
    <div class="dots-background" id="dots-background"></div>
    <slot />

    <style>
      .dots-background {
        position: fixed;
        inset: 0;
        z-index: -2;
        pointer-events: none;
        overflow: hidden;
      }

      .background-dot {
        position: absolute;
        border-radius: 50%;
        pointer-events: none;
        box-shadow: 0 0 4px rgba(0, 180, 216, 0.3);
        transition: opacity 0.3s ease;
      }
    </style>

    <script>
      // Defer background animation initialization
      let isAnimating = false;
      let animationFrame = null;
      const dots = [];
      
      // Intersection Observer for background animation
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting && !isAnimating) {
            startAnimation();
          } else if (!entry.isIntersecting && isAnimating) {
            stopAnimation();
          }
        });
      }, { threshold: 0.1 });

      class Dot {
        constructor(container, x, y) {
          this.container = container;
          this.x = x;
          this.y = y;
          this.size = Math.random() * 2 + 2;
          this.opacity = Math.random() * 0.4 + 0.3;
          this.velocity = {
            x: (Math.random() - 0.5) * 0.2,
            y: (Math.random() - 0.5) * 0.2
          };

          this.element = document.createElement('div');
          this.element.className = 'background-dot';
          this.element.style.width = `${this.size}px`;
          this.element.style.height = `${this.size}px`;
          this.element.style.opacity = this.opacity;
          
          const colorChoice = Math.random();
          this.element.style.background = colorChoice > 0.7 
            ? 'rgba(0, 180, 255, 1.0)'
            : colorChoice > 0.4 
              ? 'rgba(0, 255, 255, 1.0)'
              : 'rgba(220, 240, 255, 1.0)';
          
          this.updatePosition();
          container.appendChild(this.element);
        }

        updatePosition() {
          this.x += this.velocity.x;
          this.y += this.velocity.y;

          const rect = this.container.getBoundingClientRect();
          if (this.x < 0) this.x = rect.width;
          if (this.x > rect.width) this.x = 0;
          if (this.y < 0) this.y = rect.height;
          if (this.y > rect.height) this.y = 0;

          this.element.style.transform = `translate3d(${this.x}px, ${this.y}px, 0)`;
        }
      }

      function createDots() {
        const container = document.getElementById('dots-background');
        if (!container) return;
        
        container.innerHTML = '';
        const rect = container.getBoundingClientRect();
        const numDots = Math.floor(Math.min((rect.width * rect.height) / 25000, 30));
        
        for (let i = 0; i < numDots; i++) {
          dots.push(new Dot(
            container,
            Math.random() * rect.width,
            Math.random() * rect.height
          ));
        }
      }

      function animate() {
        if (!isAnimating) return;
        dots.forEach(dot => dot.updatePosition());
        animationFrame = requestAnimationFrame(animate);
      }

      function startAnimation() {
        if (isAnimating) return;
        isAnimating = true;
        animationFrame = requestAnimationFrame(animate);
      }

      function stopAnimation() {
        isAnimating = false;
        if (animationFrame) {
          cancelAnimationFrame(animationFrame);
          animationFrame = null;
        }
      }

      // Initialize only when needed
      if (document.visibilityState === 'visible') {
        const dotsContainer = document.getElementById('dots-background');
        if (dotsContainer) {
          observer.observe(dotsContainer);
          createDots();
          
          // Handle window resize efficiently
          let resizeTimeout;
          window.addEventListener('resize', () => {
            if (resizeTimeout) clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
              dots.length = 0;
              createDots();
            }, 250);
          }, { passive: true });

          // Stop animation when tab is not visible
          document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
              stopAnimation();
            } else {
              startAnimation();
            }
          });
        }
      }
    </script>
  </body>
</html>
