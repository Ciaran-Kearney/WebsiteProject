---
// Hero component with typing animation
---

<section class="hero">
  <div class="container">
    <div class="hero-content">
      <h1 class="hero-title">Hi, I'm <span class="highlight">CiarÃ¡n</span></h1>
      <p class="subtitle">I am <span id="article">a</span> <span id="typed-text" class="highlight"></span><span class="cursor">&nbsp;</span></p>
      <div class="cta-buttons">
        <a href="#contact" class="btn primary">Contact me</a>
        <a href="/assets/cv/CiaranKearney_CV.pdf" target="_blank" class="btn secondary">Download CV <span class="download-icon">ðŸ“„</span></a>
        <a href="https://www.linkedin.com/in/ciarÃ¡n-kearney/" target="_blank" class="btn secondary">LinkedIn</a>
      </div>
    </div>
  </div>
</section>

<script>
  // Defer typing animation until hero section is visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        initTyping();
        observer.disconnect();
      }
    });
  }, { threshold: 0.1 });

  observer.observe(document.querySelector('.hero'));

  function initTyping() {
    const typedText = document.getElementById('typed-text');
    const articleElement = document.getElementById('article');
    const cursor = document.querySelector('.cursor');

    // Array of objects with text and appropriate article
    const textArray = [
      { text: 'Mechanical Engineer', article: 'a' },
      { text: 'Automation Engineer', article: 'an' },
      { text: 'Senior Acoustic Consultant', article: 'a' },
      { text: 'Project Engineer', article: 'a' },
      { text: 'Quick Learner', article: 'a' },
      { text: 'Creative Thinker', article: 'a' },
      { text: 'Team Player', article: 'a' },
      { text: 'Technical Problem Solver', article: 'a' },
      { text: 'Continuous Learner', article: 'a' },
      { text: 'ready to join your team!', article: '' }
    ];

    let arrayIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let isComplete = false;
    let typeTimeout = null;

    function updateArticle() {
      const currentItem = textArray[arrayIndex];
      articleElement.textContent = currentItem.article;
    }

    function typeWriter() {
      if (document.hidden) {
        if (typeTimeout) clearTimeout(typeTimeout);
        typeTimeout = setTimeout(typeWriter, 100);
        return;
      }

      const currentItem = textArray[arrayIndex];
      const currentText = currentItem.text;

      if (isDeleting && !isComplete) {
        typedText.textContent = currentText.substring(0, charIndex - 1);
        charIndex--;
      } else {
        typedText.textContent = currentText.substring(0, charIndex + 1);
        charIndex++;
      }

      cursor.classList.toggle('typing');

      let typeSpeed = 90;
      if (isDeleting) {
        typeSpeed /= 1.5;
      }

      if (!isDeleting && charIndex === currentText.length) {
        if (arrayIndex === textArray.length - 1) {
          isComplete = true;
          cursor.classList.add('hide');
          return;
        }
        isDeleting = true;
        typeSpeed = 1800;
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        arrayIndex++;
        if (arrayIndex >= textArray.length) {
          arrayIndex = 0;
        }
        updateArticle();
      }

      typeTimeout = setTimeout(typeWriter, typeSpeed);
    }

    // Start typing
    updateArticle();
    typeTimeout = setTimeout(typeWriter, 1000);

    // Cleanup on page visibility change
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        if (typeTimeout) clearTimeout(typeTimeout);
      } else {
        typeTimeout = setTimeout(typeWriter, 100);
      }
    });
  }
</script>

<style>
  .hero {
    height: 100vh;
    display: flex;
    align-items: center;
    text-align: center;
    padding-top: 80px;
    contain: content;
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
    will-change: transform;
  }

  .hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 10px;
    color: var(--heading-color);
    text-rendering: optimizeLegibility;
  }

  .cursor {
    display: inline-block;
    width: 2px;
    background-color: var(--accent-primary);
    margin-left: 2px;
    animation: blink 1s infinite;
  }

  .cursor.typing {
    animation: none;
  }

  .cursor.hide {
    display: none;
  }

  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }

  @media (max-width: 768px) {
    .hero-title {
      font-size: 2rem;
    }
  }
</style>
